Note: Will need to be updated continually to make sure it's up to date.

This is a description of how everything in this library currently works together.

PYTHON FILES:

mgetter.py: Given search parameters, searches the open5e api and returns a list of monsters to output.json.

export_monster.py: Given a monster slug, it searches data.json (for testing purposes - will be changed to output.json) for a match and converts the info into a .monster file, producing a valid export for D&D 5e statblock generator. Utilizes sample_monster.monster and j2m_keys.json in generation.

compare.py: Purely for testing purposes. Currently takes in a specific .monster file (ex: adult-red-dragon-expected.monster) and compares it with a test file (ex: test.monster) to ensure everything is correct.

algorithm.py: The actual algorithm - given an encounter difficulty level and party members, along with the monsters generated by mgetter, picks out a cast of monsters for an encounter. Currently only consists of a work in progress function.

Monster.py: Contains the outline for a Monster class type, with variables for health and flavor text.

PartyMember.py: Contains the outline for a PartyMember class type, with variables for health and class.

routes.py: Routes api calls to the website.

DATA FILES:

data.json: Currently separate from output.json for testing purposes, this consists of a list of monsters from the api that can be used in export_monster.

output.json: A list of monsters that mgetter has fetched from the api.

sample_monster.monster: Used in export_monster as a sample monster template that is built off of for the .monster files.

j2m_keys.json: Used in export_monster in order to create a list of keys needed to generate a .monster file. It states each of the .monster categories (ex: blindsight) and the .json category that it's found in (ex: senses). Necessary to efficiently fill out the sample_monster template.