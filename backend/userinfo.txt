Note: Will need to be updated continually to make sure it's up to date.

This is a description of how everything in this library currently works together.

PYTHON FILES:

mgetter.py: Given search parameters, searches the open5e api and returns a list of monsters to output.json.
Can either just run it w/ getMonsters() and get an unfiltered list or w/ getMonsters(params) to have it search for
monsters based off their traits.

export_monster.py: Given a monster slug, it searches output.json (created by mgetter) for a match and converts the info into a .monster file, producing a valid export for D&D 5e statblock generator. Utilizes sample_monster.monster and j2m_keys.json in generation.

algorithm.py: The actual algorithm - given an encounter difficulty level and party members, along with the monsters generated by mgetter, picks out a cast of monsters for an encounter. Currently work in progress. Bless the team
working on it because I have no clue what they're doing.

routes.py: Routes api calls to the website. Necessary for running any python files in our javascript.

CLASSES FOLDER -

Monster.py: Contains the outline for a Monster class type, used in the algorithm.

PartyMember.py: Contains the outline for a PartyMember class type, used in the algorithm.

DATA FILES:

output.json: A list of monsters that mgetter has fetched from the api. Used in export_monster.

sample_monster.monster: Used in export_monster as a sample monster template that is built off of for the .monster files.

j2m_keys.json: Used in export_monster in order to create a list of keys needed to generate a .monster file. It states each of the .monster categories (ex: blindsight) and the .json category that it's found in (ex: senses). Necessary to efficiently fill out the sample_monster template.